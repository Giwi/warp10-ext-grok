//
//   Copyright 2019  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'net.nemerosa.versioning' version '2.14.0'
    id 'io.codearte.nexus-staging' version '0.22.0'
    id 'antlr'
    id 'java'
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
}

<<<<<<< HEAD
// ------------------------------------------------------------------
//                    AUTO RELEASE MANAGEMENT
// Gets the version name from the latest Git tag
// if no commit occurs -> the name of the tag likes 0.0.1
// if commit occurs -> 0.0.1-12-aabb1122 (number of commits + version number)
// ------------------------------------------------------------------
def getVersionName(String revision) {
  String newRevision = revision

  if (null == System.getProperty("nogit") && !revision.endsWith('SNAPSHOT')) {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--always'
      standardOutput = stdout
    }
    newRevision = stdout.toString().trim()
  }
  return newRevision
}

//
// Configure bintray elements below.
//
// Also add the following definitions in your gradle.properties
//
// bintrayUser = The user to use for uploading to bintay
// bintrayUserOrg = The organization to use on bintray
// bintrayApiKey = The bintray API key
//

project.ext.bintrayRepo = 'maven'
project.ext.bintrayVcsUrl = 'https://github.com/senx/warp10-ext-grok.git'
project.ext.bintrayLicenses = [ 'Apache-2.0' ]

//
// GnuPG configuration for signing module
// @see https://docs.gradle.org/current/userguide/signing_plugin.html
//

//project.ext.'signing.gnupg.keyName' = 'hhhhhhhh'


project.ext.group = 'io.warp10'
project.ext.name = 'warp10-ext-grok'
project.ext.uberjar = null != System.getProperty('uberjar')
project.ext.version = getVersionName('0.0.0') + (project.ext.uberjar ? '-uberjar' : '')

version project.ext.version

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
=======
project.group = 'io.warp10'
project.description = 'Grok WarpScript™ Extension'
>>>>>>> 609ba9bac530efa2f71697d46b84dd4ac9e54a0a

// If the current tag is set, then it's a new release. Don't add build number
project.version = versioning.info.lastTag + ((versioning.info.tag != null) ? '' : '-' + versioning.info.build)
//
// Repositories for the project dependencies
//

repositories {
    mavenCentral()
}

configurations {
    provided
}

//
// Dependencies of the project
// Dependencies declared in the 'provided' configuration will not be added to the über jar
//

dependencies {
  compileOnly group: 'io.warp10', name: 'warpscript', version: '+'

  //
  // Insert your dependencies here
  //
  implementation "io.krakens:java-grok:0.1.9"

  testImplementation 'io.warp10:warpscript:+'
  testImplementation 'junit:junit:4.12'
}

test {
  useJUnit()
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
}

eclipse.classpath.plusConfigurations += [configurations.provided]  // Eclipse users only

// for IntelliJ users
idea {
  module {
    scopes.PROVIDED.plus += [configurations.provided]
  }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes('WarpFleet-Description': project.description)
        attributes('WarpFleet-Group': project.group)
        attributes('WarpFleet-Artifact': project.name)
        attributes('WarpFleet-Version': project.version)
    }

    from('src/main/warpscript') {
        //
        // Only consider macros which are in our namespace
        //
        include project.group + '/' + project.name + '/*.mc2'
        include project.group + '/' + project.name + '/**/*.mc2'
    }

    from('.') {
        include 'README.md'
        include project.group + '-' + project.name + '.conf'
    }
}

shadowJar {
    classifier = ''

    manifest {
        attributes('WarpFleet-Description': project.description)
        attributes('WarpFleet-Group': project.group)
        attributes('WarpFleet-Artifact': project.name)
        attributes('WarpFleet-Version': project.version)
    }

    from('src/main/warpscript') {
        //
        // Only consider macros which are in our namespace
        //
        include project.group + '/' + project.name + '/*.mc2'
        include project.group + '/' + project.name + '/**/*.mc2'
    }

    from('.') {
        include 'README.md'
        include project.group + '-' + project.name + '.conf'
    }

    dependencies {
        exclude(dependency('org.slf4j::'))
    }
}

shadowJar.dependsOn(test)

//
// Maven related config
//
publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version = project.version
            from components.java
            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/senx/' + project.name

                scm {
                    connection = 'scm:git:git://github.com/senx/' + project.name
                    developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
                    url = 'https://github.com/senx/' + project.name
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'senx'
                        name = 'SenX'
                        email = 'contact@senx.io'
                    }
                }
            }
        }
        uberJar(MavenPublication) {
            groupId project.group
            artifactId project.name
            artifact(shadowJar)
            artifact(tasks['javadocJar'])
            artifact(tasks['sourcesJar'])
            version = project.version + '-uberjar'

            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/senx/' + project.name

                scm {
                    connection = 'scm:git:git://github.com/senx/' + project.name
                    developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
                    url = 'https://github.com/senx/' + project.name
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'senx'
                        name = 'SenX'
                        email = 'contact@senx.io'
                    }
                }
            }
        }
    }

    repositories {
        if (project.hasProperty('ossrhUsername')) {
            maven {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
        if (project.hasProperty('nexusUsername')) {
            maven {
                name 'nexus'
                allowInsecureProtocol true
                url "$nexusHost/repository/maven-releases/"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }
}

artifacts {
    archives shadowJar, javadocJar, sourcesJar
}

if (project.hasProperty('ossrhUsername')) {
    nexusStaging {
        packageGroup = 'io.warp10'
        username ossrhUsername
        password ossrhPassword
    }
}

//
// Artifact Signing
//
if (project.hasProperty('signing.gnupg.keyName')) {
    signing {
        useGpgCmd()
        sign publishing.publications
    }
}
